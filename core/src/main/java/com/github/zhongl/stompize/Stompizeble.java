package com.github.zhongl.stompize;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import static com.github.zhongl.stompize.Stompize.headerName;

/** @author <a href="mailto:zhong.lunfu@gmail.com">zhongl<a> */
public abstract class Stompizeble {

    /**
     * This method would be called be stompized class, after you have called {@link Command} method.
     * It should to be override to output a Frame.
     */
    protected abstract void out(String command, Iterable<Header> headers, Content<?> content);

    /**
     * This method should be called when a Frame received.
     * It would be generated by stompize, so you are not allowed to do that.
     */
    public abstract void apply(String command, Map<String, String> headers, Object content);

    protected <T> T checkNotNull(T value, String name) {
        if (value == null) throw new StompizeException("Missing required header: " + headerName(name));
        return value;
    }

    /** This method used by {@link Stompizeble#apply(String, Map, Object)} , to convert optional header value to a {@link Header} object. */
    protected final Header[] toOptionals(Iterable<Class<? extends Header>> classes, Map<String, String> headers) {
        List<Header> list = new ArrayList<Header>();
        for (Class<? extends Header> c : classes) {
            String value = headers.get(headerName(c));
            if (value == null) continue;
            try {
                list.add(c.getConstructor(String.class).newInstance(value));
            } catch (Exception e) {
                throw new StompizeException(e.toString());
            }
        }
        return list.toArray(new Header[list.size()]);
    }

}
